# REST Client setup
# Essa √© uma representa√ß√£o do fluxo b√°sico para criar, exibir e responder
# um formul√°rio do Respondi. Voc√™ pode simular todas as etapas disparando
# requisi√ß√µes HTTP reais para o seu servidor local utilizando a extens√£o
# REST Client, dispon√≠vel aqui:
# https://marketplace.visualstudio.com/items?itemName=humao.rest-client

# Uma requisi√ß√£o depende da outra, logo voc√™ deve fazer o fluxo de cima
# para baixo para garantir que possui as vari√°veis corretas. Voc√™
# tamb√©m deve configurar o @host de acordo com o endere√ßo do seu
# ambiente atual.

@host = http://localhost:8000
@token = {{userCreate.response.body.access_token}}
@slug = {{formCreate.response.body.data.slug}}

### Criar um usu√°rio
# Voc√™ precisa ter um usu√°rio autenticado para criar seu primeiro
# formul√°rio. Para facilitar a vida, ao criar um novo user,
# essa rota j√° retornar um token para autenticar as demais request.

# @name userCreate
POST {{host}}/api/users HTTP/1.1
content-type: application/json

{
    "name": "Test User",
    "email": "{{$timestamp}}@email.test",
    "password": "TestPass321"
}

### Criar um form
# Com o token de usu√°rio, √© poss√≠vel criar um formul√°rio b√°sico.
# Na app real, nossos formul√°rios possuem muito mais propriedades,
# como estilos, valida√ß√µes e l√≥gicas.

# @name formCreate
POST {{host}}/api/forms HTTP/1.1
content-type: application/json
Authorization: Bearer {{token}}

{
    "title": "Test form",
    "fields": [
    {
        "label": "Qual seu nome?",
        "type": "text",
        "required": false
    },
    {
        "label": "Qual seu email?",
        "type": "email",
        "required": false
    },
    {
        "label": "Qual seu telefone?",
        "type": "phone",
        "required": false
    }]
}

### Acessando um form
# Ap√≥s o form criado, o dono compartilha o link com as pessoas que deseja que respondam.
# Essa pessoa √© um visitante an√¥nimo, que consome os dados atrav√©s de
# um front-end em vue.js (que por sua vez consome este endpoint).

# @name form
GET {{host}}/api/forms/{{slug}} HTTP/1.1
content-type: application/json

### Enviando respostas
# Cada pergunta gera uma linha no banco de dados. Dessa forma, temos acesso as
# respostas parciais de cada preenchimento, mesmo que a pessoa abandone
# o formul√°rio no meio. Na primeira resposta, √© gerado o respondent_id desse preenchimento

# @name submitAnswer
POST {{host}}/api/answers HTTP/1.1
content-type: application/json

{
    "form_id": "{{slug}}",
    "question": "{{form.response.body.fields.0.label}}",
    "value": "John Doe",
    "field_id": "{{form.response.body.fields.0.field_id}}",
    "type": "{{form.response.body.fields.0.type}}"
}


### Continue respondendo...
# Para que as demais respostas sejam atreladas ao mesmo respondente,
# o respondent_id deve ser informado. Se nenhum for informado,
# ser√° tratado como um novo respondente

POST {{host}}/api/answers HTTP/1.1
content-type: application/json

{
    "respondent_id": "{{submitAnswer.response.body.data.respondent_id}}",
    "form_id": "{{slug}}",
    "question": "{{form.response.body.fields.1.label}}",
    "value": "email@test.com",
    "field_id": "{{form.response.body.fields.1.field_id}}",
    "type": "{{form.response.body.fields.1.type}}"
}


### Finalizar o preenchimento
# Na aplica√ß√£o real existem diversas l√≥gicas que determinam qual √© a √∫ltima
# pergunta que aquele respondente ir√° ver. Um formul√°rio pode exibir 5 perguntas
# para um perfil de respondente e 10 para outro, por exemplo.
# Quando identificamos que √© a √∫ltima, enviamos o parametro "is_last" para
# finalizar a sess√£o e salvar a hora que o preenchimento foi conclu√≠do.

POST {{host}}/api/answers HTTP/1.1
content-type: application/json

{
    "respondent_id": "{{submitAnswer.response.body.data.respondent_id}}",
    "form_id": "{{slug}}",
    "question": "{{form.response.body.fields.2.label}}",
    "value": "5511912312312",
    "field_id": "{{form.response.body.fields.2.field_id}}",
    "type": "{{form.response.body.fields.2.type}}",
    "is_last": true
}

# Ap√≥s preencher a √∫ltima pergunta poss√≠vel para aquele respondente,
# o formul√°rio exibe uma mensagem de agradecimento no front e
# apaga o cookie com o respondent_id atual.

# üéâ Parab√©ns, voc√™ completou o fluxo b√°sico da nossa API!
